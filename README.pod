=pod

=encoding UTF-8

=head1 NAME

Asset::Pack - Easily pack assets into Perl Modules that can be fat-packed

=head1 VERSION

version 0.000001

=head1 SYNOPSIS

    #!/usr/bin/env perl
    use Asset::Pack;
    # lib/MyApp/Asset/FooJS.pm will embed assets/foo.js
    write_module('assets/foo.js' 'MyApp::Asset::FooJS' 'lib');

=head1 DESCRIPTION

This module allows you to construct Perl modules containing the content of
arbitrary files, which may then be installed or fat-packed.

In most cases, this module is not what you want, and you should use a
C<File::ShareDir> based system instead, but C<File::ShareDir> based systems are
inherently not fat-pack friendly.

However, if you need embedded, single-file applications, aggregating not only
Perl Modules, but templates, JavaScript and CSS, this tool will make some of
your work easier.

=head1 NOTES

Generated files are dependent on the Asset::Pack module. I might remove this
requirement in future but it's not a concern for me for the project I wrote
this for. Patches welcome.

=head1 FUNCTIONS

=head2 C<< module_rel_path(module) -> file_path (string) >>

Turns a module name (e.g. 'Foo::Bar') into a file path relative to a library
directory root

=head2 C<< module_full_path(module, libdir) -> file_path (string) >>

Turns a module name and a library directory into a file path

=head2 C<< pack_asset($module, $path) -> byte_string >>

Given a module name and the path of an asset to be packed, returns the new
module with the content packed into the data section

=head2 C<< write_module($source, $module, $libdir) >>

Given a source asset path, a module name and a library directory, packs the
source into a module named C<$module> and saves it in the right place relative
to C<$libdir>

See 'synopsis' and try it out!

=head2 C<< unpack_asset(FH) -> byte_string >>

C<FH> is assumed to be C<DATA>. Please pass in C<DATA>

=head1 AUTHORS

=over 4

=item *

James Laver

=item *

Kent Fredric <kentnl@cpan.org>

=back

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2015 by James Laver on time generously donated by Anomalio.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
